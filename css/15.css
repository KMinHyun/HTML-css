* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.container {
  background-color: black;
  padding: 10px;
  /* 그리드 */
  display: grid;
  /* ㄴ부모 요소한테 줌. */
  grid-template-columns: 50px 1fr 1fr;
  /* ㄴ맨 앞은 한칸에 대한 길이설정이고 fr은 남아 있는 영역을 비율로 나눠가지겠다는 뜻.
        1fr 1fr은 1:1로 나눠가지겠다는 뜻. */
        /* 1fr 50px 1fr 이렇게도 가능함. */
  grid-template-rows: 2fr 1fr 1fr;
  /* ㄴ반응형웹으로 만들면 row를 설정할 일은 없음. */
}

.item {
  background-color: aquamarine;
  border: 1px solid white;
}

.container-repeat {
  background-color: black;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  /* repeat() : 반복되는 값에 대해 자동으로 처리하는 함수 */
  grid-template-columns: repeat(3, minmax(200px, 1fr));
  /* ㄴminmax() : 최소값과 최대값을 지정할 수 있는 함수 */
  /* ㄴㄴminmax(아이템의 최소값, 셀의 최대값) */
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  /* auto-fit, auto-fill : 자동으로 column 수를 조절해줌. */
  /* ㄴauto-fit : 그리드의 아이템의 갯수와 그리드의 셀의 갯수가 일치한 채로 너비를 조절함. */
  /* ㄴauto-fill : min으로 설정한 공간에 들어갈 수 있다면 빈 셀을 증가시키며 조절함. */
  gap: 20px;
  /* column-gap, row-gap으로 별도로 지정도 가능함. */
}

.container-start-end {
  background-color: black;
  margin: 10px;
  padding: 10px;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}
/* 셀의 영역 기준으로 아이템 배치 */
.container-start-end > .item:nth-child(1) {
  grid-column: 1/3;
  grid-row: 1/3;
  /* ㄴ1/3 : 첫번째 줄부터 3번째 줄까지. */
  /* grid-column: 1/span 2; 첫번째 줄부터 2칸까지. 이렇게도 쓸 수 있음.*/
}

.container-start-end > .item:nth-child(7) {
  grid-column: 3/4;
  grid-row: 3/5;
}